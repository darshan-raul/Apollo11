apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: apollo11
  labels:
    app: dashboard
  name: dashboard
spec:
  replicas: 1
  selector:
    matchLabels:
      app: dashboard
  template:
    metadata:
      labels:
        app: dashboard
    spec:
      nodeSelector:
        cloud.google.com/compute-class: Scale-Out
        kubernetes.io/arch: arm64
      # initContainers:
      # - name: wait-for-booking-service
      #   image: curlimages/curl:7.85.0
      #   env:
      #   - name: BOOKING_HOST
      #     valueFrom:
      #       configMapKeyRef:
      #         name: dashboard
      #         key: BOOKING_HOST
      #   - name: BOOKING_PING_PATH
      #     valueFrom:
      #       configMapKeyRef:
      #         name: dashboard
      #         key: BOOKING_PING_PATH
      #   - name: BOOKING_PORT
      #     valueFrom:
      #       secretKeyRef:
      #         name: dashboard
      #         key: BOOKING_PORT
      #   command:
      #     - "sh"
      #     - "-c"
      #     - |
      #       until curl -sf http://$BOOKING_HOST:$BOOKING_PORT$BOOKING_PING_PATH; do
      #         echo "Waiting for $BOOKING_HOST:$BOOKING_PORT$BOOKING_PING_PATH to be reachable"
      #         sleep 2
      #       done
      #       echo "booking service is up"
      # - name: wait-for-movie-service
      #   image: curlimages/curl:7.85.0
      #   env:
      #   - name: MOVIE_HOST
      #     valueFrom:
      #       configMapKeyRef:
      #         name: dashboard
      #         key: MOVIE_HOST
      #   - name: MOVIE_PING_PATH
      #     valueFrom:
      #       configMapKeyRef:
      #         name: dashboard
      #         key: MOVIE_PING_PATH
      #   - name: MOVIE_PORT
      #     valueFrom:
      #       secretKeyRef:
      #         name: dashboard
      #         key: MOVIE_PORT
      #   command:
      #     - "sh"
      #     - "-c"
      #     - |
      #       until curl -sf http://$MOVIE_HOST:$MOVIE_PORT$MOVIE_PING_PATH; do
      #         echo "Waiting for $MOVIE_HOST:$MOVIE_PORT$MOVIE_PING_PATH to be reachable"
      #         sleep 2
      #       done
      #       echo "movie service is up"
      containers:
        - image: <private gcr repo>/apollo11-dashboard/dashboard@sha256:af5298e0ec6daea92fbf03776c1f6667e3b9167977367dd0b82738cff00e975f
          name: dashboard
          imagePullPolicy: IfNotPresent
          startupProbe:
            httpGet:
              path: /started
              port: 8080
            initialDelaySeconds: 30
            terminationGracePeriodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
            periodSeconds: 2
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /ready
              port: 8080
            initialDelaySeconds: 30
            successThreshold: 5
            failureThreshold: 3
            periodSeconds: 20
            timeoutSeconds: 5
          livenessProbe:
            httpGet:
              path: /ping
              port: 8080
            initialDelaySeconds: 30
            terminationGracePeriodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
            periodSeconds: 20
            timeoutSeconds: 5
          resources:
            requests:
              memory: "128Mi"
              cpu: "250m"
            limits:
              memory: "256Mi"
              cpu: "500m"
          env:
            - name: MOVIE_HOST
              valueFrom:
                configMapKeyRef:
                  name: dashboard
                  key: MOVIE_HOST
            - name: MOVIE_PORT
              valueFrom:
                secretKeyRef:
                  name: dashboard
                  key: MOVIE_PORT
            - name: BOOKING_HOST
              valueFrom:
                configMapKeyRef:
                  name: dashboard
                  key: BOOKING_HOST
            - name: BOOKING_PORT
              valueFrom:
                secretKeyRef:
                  name: dashboard
                  key: BOOKING_PORT
          ports:
            - containerPort: 8080
              protocol: TCP
      restartPolicy: Always
